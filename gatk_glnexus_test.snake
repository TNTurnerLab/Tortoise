import os
if config == {}:
    configfile: "config.json"

REFERENCE = config["reference"]
FAMILY_FILE=config["family_file"]
FAMILY_FILE_comma=config["family_file_c"]
GATK_OUT=config["gatk_out"]
GLNEXUS_FILE_DV_BCF=config["glnexus_file_dv_bcf"]
GLNEXUS_FILE_HC_BCF=config["glnexus_file_hc_bcf"]
GLNEXUS_FILE_DV_VCF=config["glnexus_file_dv_vcf"]
GLNEXUS_FILE_HC_VCF=config["glnexus_file_hc_vcf"]
DATA_DIR=config["data_dir"]
REGIONS=config["regions"]
GQ_VALUE=config["gq_value"]
DEPTH_VALUE=config["depth_value"]
OUT_DIR=config["out_dir"]

FULL={}
FAMILIES = []
INDIVIDUALS=[]
with open(FAMILY_FILE) as f:
    for line in f:
        data=line.strip().split(' ')
        print(data)
        FAMILIES.append(line.strip().split(' ')[2])
        FULL[data[-1]]=data
        i=0
        while i< len(data):
            INDIVIDUALS.append(data[i])
            i+=1
FAMILIES=["NA12878"]
GQ_VALUES=[GQ_VALUE]
DEPTH_VALUES=[DEPTH_VALUE]
#print(FAMILIES)
def glnexus_intro(wildcards):
    temp=[]
    FAMILY=wildcards.family
    print(FAMILY)
    print(FULL)
    caller='hc'
    for thing in FULL[FAMILY]:
        if caller=='hc':
            temp.append(GATK_OUT+'/'+thing+'.gatk.cpu.g.vcf.gz')
        if caller=='dv':
            temp.append(thing+'.dv.cpu.g.vcf.gz')
    return (temp)
    
    
rule all:
    input:  expand("%s/{family}.gatk.cpu.g.vcf.gz" % GATK_OUT, family=FAMILIES), expand("%s/{family}.glnexus.trio.bcf" % GLNEXUS_FILE_HC_BCF, family = FAMILIES)
    
rule gatk:
    input:  "%s/{family}.final.cram" % DATA_DIR
    output:  "%s/{family}.gatk.cpu.g.vcf.gz" % GATK_OUT
    params: prefix="{family}"
    shell: """
    export PATH=/opt/conda/bin:$PATH
    
    gatk --java-options "-Xmx128g" HaplotypeCaller -R {REFERENCE} -I {input} -O {output} --standard-min-confidence-threshold-for-calling 30
    """
rule GLnexus_hc:
    input: glnexus_intro
    output: "%s/{family}.glnexus.trio.bcf" % GLNEXUS_FILE_HC_BCF
    params: prefix="{family}"
    shell: """
    /glnexus_cli --config gatk --mem-gbytes 300  --dir {params.prefix} {input} > {output} 
    rm -r {params.prefix}
    """